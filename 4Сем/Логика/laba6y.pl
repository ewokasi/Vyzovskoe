% предикат для подсчета количества элементов в списке
count([], 0). % базовый случай: пустой список имеет ноль элементов
count([_|T], N) :- count(T, N1), N is N1 + 1. % рекурсивный случай: добавляем единицу к результату подсчета хвоста списка

% предикат для подсчета количества нулей в списке
count_zeros([], 0). % базовый случай: пустой список имеет ноль нулей
count_zeros([0|T], N) :- count_zeros(T, N1), N is N1 + 1. % рекурсивный случай: если голова списка равна нулю, добавляем единицу к результату подсчета хвоста списка
count_zeros([X|T], N) :- X \= 0, count_zeros(T, N). % рекурсивный случай: если голова списка не равна нулю, пропускаем ее и подсчитываем хвост списка


% предикат для решения задачи
solution(L, yes) :- count_zeros(L, Z), count(L, C), Z > C / 2. % если количество нулей больше половины от общего количества элементов в списке, то ответ yes
solution(L, no) :- count_zeros(L, Z), count(L, C), Z =< C / 2. % если количество нулей меньше или равно половине от общего количества элементов в списке, то ответ no

%solution([1, 0, 0, 1, 0, 1, 1, 0, 0], X).